
import plotly.plotly as py
from plotly.graph_objs import *
py.sign_in('Happy_Das', 'gqFHrnV4u2yQkUdckBtD')
trace1 = {
  "x": [ 45, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199],
  "y": [0.10715, 0.1008, 0.10075, 0.1004, 0.10075, 0.11765, 0.1201, 0.2, 0.2657, 0.31285, 0.3172, 0.31615, 0.31795, 0.2968, 0.331, 0.36175, 0.39825, 0.45915, 0.4859, 0.51095, 0.53905, 0.54515, 0.61765, 0.54295, 0.60935, 0.63445, 0.6252, 0.66595, 0.6509, 0.65565, 0.7871, 0.7753, 0.80105, 0.81995, 0.799, 0.8199, 0.80185, 0.84145, 0.8581, 0.85005, 0.8463, 0.8474, 0.86255, 0.87385, 0.8666, 0.8603, 0.82405, 0.8389, 0.82585, 0.8736, 0.8664, 0.8706, 0.8727, 0.8851, 0.8772, 0.87265, 0.84725, 0.8675, 0.84985, 0.8778, 0.86035, 0.8803, 0.86425, 0.88705, 0.87355, 0.8913, 0.88405, 0.89675, 0.8974, 0.89845, 0.8995, 0.9, 0.9038, 0.9027, 0.90485, 0.90625, 0.9091, 0.90905, 0.9099, 0.9102, 0.9109, 0.91185, 0.9125, 0.91345, 0.9144, 0.91455, 0.91535, 0.91595, 0.9165, 0.91695, 0.9181, 0.9188, 0.9191, 0.92005, 0.9215, 0.9205, 0.9218, 0.92045, 0.9225, 0.9213, 0.9232, 0.92235, 0.9237, 0.92345, 0.9246, 0.9239, 0.92645, 0.925, 0.927, 0.92585, 0.9277, 0.92615, 0.92785, 0.92605, 0.9281, 0.9248, 0.92865, 0.92565, 0.9294, 0.9266, 0.9298, 0.92665, 0.9301, 0.92725, 0.9309, 0.928, 0.9313, 0.92835, 0.93145, 0.92855, 0.93145, 0.9279, 0.92945, 0.92575, 0.9289, 0.92775, 0.9325, 0.93275, 0.93435, 0.93505, 0.93525, 0.9348, 0.93625, 0.93515, 0.93665, 0.9356, 0.93645, 0.93455, 0.93645, 0.93305, 0.92765, 0.90225, 0.904, 0.8725, 0.92555, 0.9307, 0.93245, 0.93155, 0.93445, 0.93535, 0.9384, 0.9397, 0.9399, 0.94125, 0.94125, 0.9423, 0.94175, 0.9426, 0.9421, 0.94285, 0.94255, 0.9428, 0.9428, 0.94285, 0.94335, 0.9436, 0.9442, 0.94465, 0.9447, 0.9453, 0.945, 0.94525, 0.9443, 0.94475, 0.94305, 0.9429, 0.9418, 0.9416, 0.94215, 0.9444, 0.94495, 0.94655, 0.94595, 0.9469, 0.9463, 0.9471, 0.94695, 0.94765, 0.9469, 0.9481],
  "name": "Training Accuracy",
  "type": "scatter"
}
'''
trace2 = {
  "x": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199],
  "y": [0.1075, 0.0982, 0.0979, 0.0981, 0.0988, 0.1147, 0.1251, 0.1932, 0.2554, 0.2982, 0.2993, 0.3008, 0.3075, 0.2814, 0.328, 0.3513, 0.3813, 0.4451, 0.4596, 0.4957, 0.5189, 0.529, 0.6013, 0.5257, 0.5783, 0.6127, 0.6008, 0.6395, 0.6337, 0.6332, 0.7592, 0.7612, 0.7755, 0.7975, 0.7683, 0.7994, 0.7739, 0.8212, 0.8378, 0.8341, 0.8209, 0.8299, 0.8398, 0.8511, 0.8385, 0.8373, 0.7889, 0.8187, 0.7941, 0.8518, 0.8356, 0.8461, 0.8388, 0.8568, 0.8395, 0.8451, 0.8076, 0.8386, 0.8093, 0.8486, 0.8211, 0.8496, 0.8235, 0.8561, 0.8332, 0.8595, 0.846, 0.8644, 0.86, 0.8657, 0.8612, 0.8665, 0.8639, 0.8692, 0.8638, 0.8709, 0.8691, 0.8727, 0.8685, 0.8734, 0.8699, 0.8746, 0.8703, 0.8742, 0.8714, 0.8746, 0.8722, 0.8744, 0.8729, 0.8753, 0.8742, 0.876, 0.8743, 0.877, 0.8766, 0.8769, 0.877, 0.8775, 0.8779, 0.8778, 0.8786, 0.8778, 0.8784, 0.8788, 0.8788, 0.8795, 0.879, 0.8807, 0.8799, 0.8811, 0.8799, 0.8808, 0.88, 0.8803, 0.8804, 0.8784, 0.8803, 0.8783, 0.8806, 0.8791, 0.881, 0.8788, 0.8817, 0.8785, 0.8822, 0.8793, 0.8835, 0.8798, 0.883, 0.8803, 0.8833, 0.8793, 0.8829, 0.8764, 0.8829, 0.8795, 0.8858, 0.8841, 0.8863, 0.8853, 0.8862, 0.8844, 0.8871, 0.8842, 0.8876, 0.8835, 0.8874, 0.884, 0.8867, 0.8813, 0.8781, 0.8455, 0.8503, 0.822, 0.8802, 0.8844, 0.8837, 0.8846, 0.8838, 0.8868, 0.8886, 0.8902, 0.8902, 0.8913, 0.8909, 0.8912, 0.8917, 0.892, 0.8916, 0.8919, 0.8919, 0.8919, 0.8913, 0.891, 0.8915, 0.8906, 0.8916, 0.8915, 0.8922, 0.8919, 0.8926, 0.8917, 0.8937, 0.8913, 0.8926, 0.8906, 0.8913, 0.8899, 0.8917, 0.891, 0.8944, 0.8925, 0.8941, 0.8928, 0.8943, 0.893, 0.8945, 0.8934, 0.8952, 0.8936],
  "name": "Validation Accuracy",
  "type": "scatter"
}
trace3 = {
  "x": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199],
  "y": [0.1079, 0.1003, 0.0996, 0.0993, 0.0999, 0.1165, 0.1267, 0.1892, 0.2571, 0.2962, 0.2992, 0.3036, 0.3114, 0.2914, 0.3394, 0.3514, 0.3851, 0.4483, 0.4716, 0.5023, 0.526, 0.5395, 0.6113, 0.534, 0.604, 0.6265, 0.6121, 0.6568, 0.642, 0.6399, 0.777, 0.7706, 0.7856, 0.806, 0.7794, 0.8065, 0.7815, 0.826, 0.8415, 0.8386, 0.8269, 0.8331, 0.8393, 0.858, 0.8435, 0.8443, 0.7979, 0.8221, 0.7999, 0.8574, 0.8425, 0.8512, 0.8459, 0.8646, 0.8511, 0.8528, 0.8173, 0.847, 0.8188, 0.8556, 0.8302, 0.8556, 0.8332, 0.8609, 0.8414, 0.8635, 0.8541, 0.8669, 0.8671, 0.8694, 0.8708, 0.8704, 0.8735, 0.872, 0.8749, 0.8754, 0.8768, 0.8792, 0.8772, 0.8783, 0.8782, 0.879, 0.8782, 0.8798, 0.8789, 0.881, 0.8788, 0.8808, 0.8794, 0.8819, 0.88, 0.8835, 0.8806, 0.8838, 0.8822, 0.884, 0.8822, 0.8846, 0.8823, 0.8844, 0.8836, 0.8851, 0.8847, 0.8856, 0.8857, 0.8863, 0.8869, 0.887, 0.8874, 0.887, 0.8877, 0.8874, 0.8882, 0.8878, 0.8881, 0.8858, 0.8882, 0.886, 0.8886, 0.8858, 0.889, 0.8861, 0.8894, 0.8861, 0.8899, 0.8868, 0.8897, 0.8866, 0.8901, 0.8858, 0.8898, 0.8856, 0.8888, 0.8845, 0.8886, 0.886, 0.8919, 0.8892, 0.8917, 0.8905, 0.8918, 0.8893, 0.8923, 0.8891, 0.893, 0.8892, 0.8923, 0.8887, 0.8924, 0.8869, 0.8857, 0.8544, 0.8626, 0.8259, 0.8899, 0.8903, 0.8921, 0.8894, 0.8927, 0.8912, 0.8946, 0.8943, 0.8947, 0.8944, 0.8947, 0.8943, 0.895, 0.8942, 0.8954, 0.8934, 0.8952, 0.8941, 0.8951, 0.8934, 0.8954, 0.8944, 0.896, 0.8953, 0.896, 0.8952, 0.8972, 0.8952, 0.8971, 0.8943, 0.8972, 0.8941, 0.8952, 0.8943, 0.897, 0.8956, 0.898, 0.8969, 0.8982, 0.897, 0.8979, 0.8972, 0.8991, 0.8976, 0.8992, 0.8983],
  "name": "Testing Accuracy",
  "type": "scatter"
}
'''
#data = Data([trace1, trace2, trace3])
data = Data([trace1])
layout = {
  "title": "training, validation and test accuracy vs. number of training iterations of gradient descent.",
  "xaxis": {"title": "number of vectors."},
  "yaxis": {"title": "Accuracy"}
}

fig = Figure(data=data, layout=layout)
plot_url = py.plot(fig)

'''
from sklearn.model_selection import learning_curve
from sklearn.svm import SVC

train_sizes, train_scores, valid_scores = learning_curve(
    SVC(kernel='linear'), X, y, train_sizes=[50, 80, 110], cv=5)
train_sizes
array([ 50, 80, 110])
train_scores
array([[ 0.94,  0.92,  0.92],
       [ 0.94,  0.92,  0.92],
       [ 0.47,  0.45,  0.42]])
valid_scores
array([[ 0.90,  0.92,  0.94],
       [ 0.90,  0.92,  0.94],
       [ 0.44,  0.39,  0.45]])
'''

'''
import numpy as np
from sklearn.model_selection import validation_curve
from sklearn.datasets import load_iris
from sklearn.linear_model import Ridge

np.random.seed(0)
iris = load_iris()
X, y = iris.data, iris.target
indices = np.arange(y.shape[0])
np.random.shuffle(indices)
X, y = X[indices], y[indices]

train_scores, valid_scores = validation_curve(Ridge(), X, y, "alpha",
                                              np.logspace(-7, 3, 3))
train_scores = {1, 5, 10, 15, 20, 25, 30, 35, 40}
#array([[ 0.94,  0.92,  0.92],
      # [ 0.94,  0.92,  0.92],
      # [ 0.47,  0.45,  0.42]])



valid_scores = {0, 50, 46, 55, 60, 50, 70, 70, 70}
#array([[ 0.90,  0.92,  0.94],
       #[ 0.90,  0.92,  0.94],
       #[ 0.44,  0.39,  0.45]])
'''